name: Deploy to Cloud Run

on:
  # Trigger on pushes to main branch
  push:
    branches: [ "main" ]
  
  # Allow manual trigger
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  REPO_NAME: api-repo
  SERVICE_NAME: my-api-service
  IMAGE_NAME: my-api

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Ensure migrations directory exists
        run: mkdir -p migrations
        
      - name: Run tests and generate coverage
        run: npm run coverage

  deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        run: |
          echo "Building and pushing Docker image..."
          echo "Build context files:"
          ls -la
          
          # Debug: Show what variables resolve to
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "REGION: ${{ env.REGION }}"
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
          
          # Set variables for cleaner command
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}"
          
          # Build and push with simplified syntax
          docker buildx build \
            --platform linux/amd64 \
            --tag "${IMAGE_BASE}:${{ github.sha }}" \
            --tag "${IMAGE_BASE}:latest" \
            --push \
            .

      - name: Create Terraform state bucket (if not exists)
        run: |
          gsutil mb gs://terraform-state-${{ env.PROJECT_ID }} 2>/dev/null || echo "Bucket already exists"
          gsutil versioning set on gs://terraform-state-${{ env.PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Initialize Terraform with GCS backend
        working-directory: ./terraform
        run: terraform init -backend-config=backend.conf

      - name: Terraform plan and apply
        working-directory: ./terraform
        run: |
          # First run plan to see what Terraform wants to do
          echo "=== Terraform Plan ==="
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="repo_name=${{ env.REPO_NAME }}" \
            -var="service_name=${{ env.SERVICE_NAME }}" \
            -var="image_name=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ github.sha }}"
          
          echo "=== Terraform Apply ==="
          # Apply with target to only update the Cloud Run service (avoid recreating registry)
          terraform apply -auto-approve \
            -target=google_cloud_run_service.api_service \
            -target=google_cloud_run_service_iam_member.public_access \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="repo_name=${{ env.REPO_NAME }}" \
            -var="service_name=${{ env.SERVICE_NAME }}" \
            -var="image_name=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ github.sha }}"

      - name: Get service URL
        working-directory: ./terraform
        run: |
          SERVICE_URL=$(terraform output -raw service_url)
          echo "ðŸš€ Service deployed successfully!"
          echo "Service URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Test deployment
        run: |
          # Wait a moment for service to be ready
          sleep 10
          
          # Test health endpoint
          curl -f "${{ env.SERVICE_URL }}/health" || exit 1
          echo "âœ… Health check passed!"

